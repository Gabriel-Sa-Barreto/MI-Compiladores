"Case Senstive" = 'True'
"Start Symbol"  = <Program>
                
id     = {Letter}({AlphaNumeric}|'_')*
number = {Number}+('.'{Number}+)?

Comment Start = '{#'
Comment End   = '#}'
Comment Line  = '%'

!-------------------------------------------------------------
!Start of the program
<Program> ::= <declaration_const> <declaration_var> <function_declaration> | <expressao> ! para testar expressao
!-------------------------------------------------------------

!------------------------------------------------------------ 
!- algoritimo function          
<main_function> ::= <function_parameters> '{' <function_body> '}'
!-------------------------------------------------------------

!-------------------------------------------------------------
! Primitive Types or New Types
<primitive_type> ::= 'inteiro' | 'real' | 'booleano' | 'char' | 'cadeia' | 'vazio'
<type>           ::= <primitive_type> | id            
!-------------------------------------------------------------

!-------------------------------------------------------------
! Values Type
<value>  ::= number | verdadeiro | falso
!-------------------------------------------------------------


!-------------------------------------------------------------
! Variables Block
<declaration_var>  ::= variaveis '{' <declaration_var1>
<declaration_var1> ::= <type> id <declaration_var2> | '}'
<declaration_var2> ::= '=' <value> <declaration_var3> | <vector_matrix> | <declaration_var3>
<declaration_var3> ::= ',' id <declaration_var2>  | ';' <declaration_var1>                               
!-------------------------------------------------------------

!- Declaration and Initialization of Vector and Matrix
!- Ex:
!- a[5];
!- a[5] = [0,1,2,3,4];
!- b[4], c[4];
!- a[2][2];
!- a[2][2] = [0,1,3; 4,5,6; 7,8,9]

<vector_matrix>   ::= '[' number ']' <vector_matrix_1>
<vector_matrix_1> ::= '[' number ']' <vector_matrix_2> | '=' <init_vector> <declaration_var3> | <declaration_var3>  !- Declara uma matriz ou inicializa o vetor ou finaliza a declaração. 
<vector_matrix_2> ::= '=' <init_matrix> <declaration_var3> | <declaration_var3>                                     !- Inicializa a matriz ou finaliza a declaração. 

<init_matrix>     ::= '[' <init_matrix_1>
<init_matrix_1>   ::=     <value> <init_matrix_2>                                  !- Insere um valor para uma posição da matriz.                             
<init_matrix_2>   ::= ',' <init_matrix_1> | ';' <init_matrix_1> | ']'              !- Após a inserção de um valor, pode vir um ';' ou ',' ou ']' para finalizar.

<init_vector>     ::= '[' <init_vector_1>
<init_vector_1>   ::=     <value> <init_vector_2>                                  !- Insere um valor para uma posição do vetor.                             
<init_vector_2>   ::= ',' <init_vector_1> | ']'                                    !- Após a inserção de um valor, pode vir uma ',' ou ']' para finalizar.
!-------------------------------------------------------------

!-------------------------------------------------------------
! Constants Block
<declaration_const>  ::= constantes '{' <declaration_const1>
<declaration_const1> ::= <primitive_type> id '=' <value> <declaration_const2> | '}'
<declaration_const2> ::= ',' id '=' <value> <declaration_const2> | ';' <declaration_const1>
!-------------------------------------------------------------

!-------------------------------------------------------------
! Declaration of Function Blocks
<function_declaration>  ::= funcao <type> <function_declaration1>
<function_declaration1> ::= algoritmo <main_function> | <function_declaration2>                       !- Verifica se é a função algoritmo ou outra qualquer.
<function_declaration2> ::= id <function_parameters> '{' <function_body> '}' <function_declaration>   !- Permite declarar n funções até encontrar a função algortimo.
!-------------------------------------------------------------

!-------------------------------------------------------------
! Declaration of Function Parameters
<function_parameters>   ::= '(' <function_parameters1> 
<function_parameters1>  ::= <function_parameters2> id <function_parameters3> | ')'    !- Declara parâmetros ou não.
<function_parameters2>  ::=      <primitive_type>        | id                         !- tipo primitivo ou um novo tipo criado a partir de um registro.                         
<function_parameters3>  ::= '['']' <function_parameters4>  | <function_parameters5>   !- verifica se é um vetor ou variável qualquer.
<function_parameters4>  ::= '['']' <function_parameters5>  | <function_parameters5>   !- verifica se é um vetor ou uma matriz.                                             
<function_parameters5>  ::= ','  <function_parameters1>  | ')'                        !- verifica se irá declarar outros parâmetros ou irá finalizar.
!-------------------------------------------------------------

!-------------------------------------------------------------
! Declaration of Function Body
<function_body>         ::= <declaration_const> <function_body1> | <function_body1>
<function_body1>        ::= <declaration_var>   <function_body2> | <function_body2>
<function_body2>        ::= retorno                    !- ATENÇÃO: Falta colocar o que será retornado.
!-------------------------------------------------------------


!-------------------------------------------------------------
! expressões
<expressao> ::= <expr> | <exprRel> | <exprLog>

! Expressões Aritméticas: !
!<expr0> ::= number <expr2> | id <expr1> | '('<expr>')' <expr4> | <operatorAuto> id <expr4> ! acho que no fim das contas não precisa, um 5 solto em qualquer lugar seria uma exp
<exprValorMod> ::= id | number
<exprValor> ::= <operatorSoma> <exprValorMod> | <exprValorMod> | '('<expr>')'
<exprMulti0> ::=  <exprValor> <exprMultiPos>
<exprMulti> ::= <exprValor> <operatorMulti> <exprMulti0>
<expr>   ::= <exprMulti> <exprMultiPos> <expr2> | number <expr2> | id <expr1> | '('<expr>')' <expr2> | <operatorAuto> id <expr2>
<exprMultiPos> ::= <operatorMulti> <exprMulti0> | <>
<expr1> ::= <operatorSoma><expr> | <operatorAuto><expr2> | <>
<expr2> ::= <operatorSoma><expr> | <>
<operatorSoma> ::= '+' | '-'
<operatorMulti> ::= '*' | '/' 
<operatorAuto> ::= '++' | '--'


! Expressões Relacionais: !
! o valor da comparação relacional pode ser uma expressão aritmética o que comtempla o valor unico de id e number
<exprRelValor> ::= <expr> | 'verdadeiro' | 'falso' | 'vazio'
<exprRel>   ::= <exprRelValor> <operatorRel> <exprRel1> | '(' <exprRel> ')' <exprRel2>
<exprRel1> ::= <exprRelValor> <exprRel2> | '(' <exprRel> ')' <exprRel2>
<exprRel2> ::= <operatorRel><exprRel1> | <>
<operatorRel> ::= '==' | '>=' | '<=' | '!='

! Expressões Logicas: !
! o valor da comparação logica pode ser uma expressão relacional que por sua vez pode ser uma expressão aritmética o que comtempla o valor unico de id e number
<exprLogValor> ::= <exprRel> | 'verdadeiro' | 'falso' | 'vazio'
<exprLog>   ::= <exprLogValor> <operatorLog> <exprLog1> | '(' <exprLog> ')' <exprLog2>
<exprLog1> ::= <exprLogValor> <exprLog2> | '(' <exprLog1> ')' <exprLog2>
<exprLog2> ::= <operatorLog><exprLog1> | <>
<operatorLog> ::= '!' | '&&' | '||'
!-------------------------------------------------------------
