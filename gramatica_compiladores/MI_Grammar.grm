"Case sensitive" = 'True'
"Start Symbol"  = <Program>
               
id      = {Letter}({AlphaNumeric}|'_')*
number  = {Number}+('.'{Number}+)?
cad     = '"'( {AlphaNumeric}| [!#$%&()*+,-./:;<=>?@\^_`{|}~]|'['|']' | '\"' )* '"'
char    = ['']( {AlphaNumeric}| [!#$%&()*+,-./:;<=>?@\^_`{|}~]|'['|']' | '\'[''] ) ['']
boolean = 'verdadeiro' | 'falso'
                
Comment Start = '{#'
Comment End   = '#}'
Comment Line  = '%'


!-------------------------------------------------------------
!Start of the program
<Program> ::= <declaracao_reg> <declaration_const> <declaration_var> <function_declaration> !| <expressao>
!-------------------------------------------------------------

!------------------------------------------------------------ 
!- algoritimo function          
<main_function> ::= <function_parameters> '{' <function_body> '}'
!-------------------------------------------------------------

!-------------------------------------------------------------
! Primitive Types or New Types
<primitive_type> ::= 'inteiro' | 'real' | 'booleano' | 'char' | 'cadeia' | 'vazio'
<type>           ::= <primitive_type> | id            
!-------------------------------------------------------------

!-------------------------------------------------------------
! Variables Block
<declaration_var>  ::= variaveis '{' <declaration_var1>
<declaration_var1> ::= <type> id <declaration_var2> | '}'
<declaration_var2> ::= '=' <value> <declaration_var3> | <vector_matrix> | <declaration_var3>
<declaration_var3> ::= ',' id <declaration_var2>  | ';' <declaration_var1>                               
!-------------------------------------------------------------

!- Declaration and Initialization of Vector and Matrix
!- Ex:
!- a[5];
!- a[5] = [0,1,2,3,4];
!- b[4], c[4];
!- a[2][2];
!- a[2][2] = [0,1,3; 4,5,6; 7,8,9]

<vector_matrix>   ::= '[' <exprNumber> ']' <vector_matrix_1>
<vector_matrix_1> ::= '[' <exprNumber> ']' <vector_matrix_2> | '=' <init_vector> <declaration_var3> | <declaration_var3>  !- Declara uma matriz ou inicializa o vetor ou finaliza a declaração. 
<vector_matrix_2> ::= '=' <init_matrix> <declaration_var3> | <declaration_var3>                                     !- Inicializa a matriz ou finaliza a declaração. 

<init_matrix>     ::= '[' <init_matrix_1>
<init_matrix_1>   ::=     <value_with_IDE> <init_matrix_2>                                  !- Insere um valor para uma posição da matriz.                             
<init_matrix_2>   ::= ',' <init_matrix_1> | ';' <init_matrix_1> | ']'              !- Após a inserção de um valor, pode vir um ';' ou ',' ou ']' para finalizar.

<init_vector>     ::= '[' <init_vector_1>
<init_vector_1>   ::=     <value_with_IDE> <init_vector_2>                                  !- Insere um valor para uma posição do vetor.                             
<init_vector_2>   ::= ',' <init_vector_1> | ']'                                    !- Após a inserção de um valor, pode vir uma ',' ou ']' para finalizar.
!-------------------------------------------------------------

!-------------------------------------------------------------
! Constants Block
<declaration_const>  ::= constantes '{' <declaration_const1>
<declaration_const1> ::= <primitive_type> id '=' <value> <declaration_const2> | '}'
<declaration_const2> ::= ',' id '=' <value> <declaration_const2> | ';' <declaration_const1>
!-------------------------------------------------------------

!-------------------------------------------------------------
! Declaration of Function Blocks
<function_declaration>  ::= funcao <type> <function_declaration1>
<function_declaration1> ::= algoritmo <main_function> | <function_declaration2>                       !- Verifica se é a função algoritmo ou outra qualquer.
<function_declaration2> ::= id <function_parameters> '{' <function_body> '}' <function_declaration>   !- Permite declarar n funções até encontrar a função algortimo.
!-------------------------------------------------------------

!-------------------------------------------------------------
! Declaration of Function Parameters
<function_parameters>   ::= '(' <function_parameters1> 
<function_parameters1>  ::= <type> id <function_parameters2> | ')'    !- Declara parâmetros ou não.                         
<function_parameters2>  ::= '['']' <function_parameters3>  | <function_parameters4>   !- verifica se é um vetor ou variável qualquer.
<function_parameters3>  ::= '['']' <function_parameters4>  | <function_parameters4>   !- verifica se é um vetor ou uma matriz.                                             
<function_parameters4>  ::= ','  <function_parameters1>  | ')'                        !- verifica se irá declarar outros parâmetros ou irá finalizar.
!-------------------------------------------------------------

!-------------------------------------------------------------
! Declaration of Function Body
<function_body>         ::= <declaration_const> <function_body1> | <function_body1>
<function_body1>        ::= <declaration_var>   <function_body2> | <function_body2>
<function_body2>        ::= <com_enquanto> <function_body2> | <com_para> <function_body2> | <se> <function_body2>
                         | <write_cmd> <function_body2> | <read_cmd> <function_body2> | <functionCall> <function_body2> | <var_atr> <function_body2> | <retornar>
<retornar> ::= retorno <retornar1> ';'
<retornar1> ::= cad | char | <expressao> | <>
!-------------------------------------------------------------
             
!-------------------------------------------------------------
!- Function Call
<functionCall> ::= id '(' <varList0> ')' ';'
<varList0>     ::= <value> <varList2> | <read_value> <varList2> | <>
<varList1>     ::= <value> <varList2> | <read_value> <varList2>
<varList2>     ::= ',' <varList1> | <>                                                 !- Finaliza a lista de parâmetros ou conti

!- Vector and Matrix access
<v_m_access>   ::= '[' <exprNumber> ']' <v_m_access1>
<v_m_access1>  ::= <v_m_access> |    
!------------------------------------------------------------

!-------------------------------------------------------------
! Values Type
<value>                 ::= number | boolean | cad | char
<value_with_IDE>        ::= <value> | id
<value_with_expressao>  ::= <expressao> | cad | char
!-------------------------------------------------------------

<com_body>        ::= <com_enquanto> <com_body> | <com_para> <com_body> | <se> <com_body> | <write_cmd> <com_body> | <read_cmd> <com_body> | <functionCall> <com_body> | <var_atr> <com_body> | <com_retornar>                       
<com_retornar> ::= retorno <com_retornar1> ';' | <>
<com_retornar1> ::= <value_with_expressao> | <>


!-------------------------------------------------------------
! Comand enquanto
<com_enquanto> ::= enquanto '(' <args> ')' '{' <com_body> '}'
<args> ::= <expressao> |
!-------------------------------------------------------------

!-------------------------------------------------------------
!Comand para
<com_para> ::= para '(' <init> <stop> ';' <step> ')' '{' <com_body> '}'
<init> ::= <var_atr> | ';'
<stop> ::= <expressao> |
<step> ::= <expressao> |
!-------------------------------------------------------------

!-------------------------------------------------------------
! expressões
! Expressões numericas( apenas uma expressão aritmética e que permite o uso de '(' ')' ): !
<exprNumber>   ::= <exprArt> | '(' <exprNumber> ')' <exprMultiPos> <exprNumber1>
<exprNumber1>  ::= <operatorSoma> <exprNumber> | <>

! Expressões Aritméticas: !
<exprValorMod> ::=  number | <operatorAuto0> <read_value> | <read_value> <operatorAuto> ! um IDE pode ter operações de incremento/decremento
<exprMulti> ::= <operatorSoma> <exprValorMod> <exprMultiPos> | <exprValorMod> <exprMultiPos>
<exprArt>   ::= <exprMulti> <expr1> 
<exprMultiPos> ::= <operatorMulti> <exprMulti> | <>
<expr1> ::= <operatorSoma> <exprNumber> | <>
<operatorSoma> ::= '+' | '-'
<operatorMulti> ::= '*' | '/'
<operatorAuto0> ::= '++' | '--'
<operatorAuto> ::= '++' | '--' | <>


! Expressões Relacionais: !
! o valor da comparação relacional pode ser uma expressão aritmética o que comtempla o valor unico de id e number
<exprRel0>   ::= <exprRel> | '(' <expressao> ')'
<exprRel>   ::= <exprArt> <exprRel1> | boolean <exprRel1>
<exprRel1> ::= <operatorRel> <exprRel0> | <>
<operatorRel> ::= '==' | '>=' | '<=' | '!=' | '>' | '<'

! Expressões Logicas: !
! o valor da comparação logica pode ser uma expressão relacional que por sua vez pode ser uma expressão aritmética o que comtempla o valor unico de id e number e boolean
<expressao>   ::= <exprRel> <exprLog1> | '(' <expressao> ')' <exprLog2> | '!' <expressao> 
<exprLog1> ::=  <operatorLog> <expressao> | <>
<exprLog2> ::= <operatorLog> <expressao> | <operatorMulti> <expressao> | <operatorRel> <expressao> | <operatorSoma> <expressao> | <>
<operatorLog> ::= '&&' | '||'
!-------------------------------------------------------------

! Declaração de Registro !
<declaracao_reg>    ::= registro id '{' <declaracao_reg1> |
<declaracao_reg1>   ::= <type> id <declaracao_reg4> <declaracao_reg2> 
<declaracao_reg2>   ::= ',' id <declaracao_reg2> | ';' <declaracao_reg3>
<declaracao_reg3>   ::= '}' <declaracao_reg> | <declaracao_reg1>
<declaracao_reg4>   ::= <v_m_access> |
!-------------------------------------------------------------

!- Registry Access
<elem_registro>         ::= '.' id <nested_elem_registro>
<nested_elem_registro>  ::= '.' id <nested_elem_registro1> | <v_m_access> <nested_elem_registro1> | <>
<nested_elem_registro1> ::= <elem_registro> | <>
!-------------------------------------------------------------
                          
! Se, Se Senão, Senão !
<se>                ::= 'se' '(' <expressao> ')' '{' <com_body> '}' <se_body>  
<se_body>           ::= <senao> | <>
<senao>             ::= 'senao' <se_senao>
<se_senao>          ::= <se> | '{' <com_body> '}' 
!-------------------------------------------------------------

! Leia e escreva
<write_cmd>   ::= escreva '(' <value_with_expressao> <write_value_list> ')' ';'
<write_value_list> ::= ',' <value_with_expressao> <write_value_list> | <>

<read_cmd> ::= leia '(' <read_value> <read_value_list> ')' ';'
<read_value_list> ::= ',' <read_value> <read_value_list> |
<read_value> ::= id <read_value0>
<read_value0> ::= <v_m_access> | <elem_registro> | <>
!-------------------------------------------------------------

! Atribuições de Variáveis 
<var_atr> ::= <read_value> '=' <atr_value> <atr_1> 
<atr_value> ::= <value_with_expressao> | <functionCall>
<atr_1> ::= ',' <var_atr> | ';'
!-------------------------------------------------------------